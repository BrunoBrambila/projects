<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora Funil de Aplicação</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Cor de fundo similar à imagem 2 (claro) */
        }
        .calculator-container {
            background-color: #ffffff; /* Fundo branco para o container principal */
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .input-group label {
            color: #1e3a8a; /* Azul escuro para os labels, inspirado na imagem 2 */
            font-weight: 600;
        }
        .input-field, .slider {
            border-color: #93c5fd; /* Azul mais claro para bordas de input */
        }
        .input-field:focus, .slider:focus {
            border-color: #3b82f6; /* Azul mais forte para foco */
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
        .slider-value {
            background-color: #1e3a8a; /* Azul escuro para o valor do slider */
            color: white !important; /* Cor do texto definida como BRANCA e com prioridade */
            padding: 2px 8px;
            border-radius: 6px;
            font-size: 0.875rem;
            min-width: 50px;
            text-align: center;
            /* Removendo a classe 'input-field' daqui se ela estiver causando conflito,
               já que os inputs numéricos têm suas próprias classes e a 'text-white' via Tailwind.
               A cor é explicitamente definida como branca aqui com !important. */
        }
        .results-card {
            background-color: #1e3a8a; /* Azul escuro para o card de resultados */
            border-radius: 8px;
            padding: 16px;
            color: white;
        }
        .results-card h3 { /* Não usado diretamente, mas mantido para referência */
            font-size: 1.125rem;
            font-weight: 600;
            border-bottom: 1px solid #3b82f6; /* Linha divisória azul mais clara */
            padding-bottom: 8px;
            margin-bottom: 12px;
        }
        .result-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #3b82f630; /* Linha divisória sutil */
        }
        .result-item:last-child {
            border-bottom: none;
        }
        .result-item span:first-child {
            font-weight: 500;
        }
        .result-item span:last-child {
            font-weight: 700;
            font-size: 1.125rem;
            transition: all 0.4s ease-in-out; /* Animação para os valores dos resultados */
        }
        .main-result {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6); /* Gradiente para o faturamento, inspirado no R$ 0,00 da img2 */
            color: white;
            padding: 12px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 16px;
        }
        .main-result span {
            display: block;
        }
        .main-result .label {
            font-size: 1rem;
            font-weight: 500;
        }
        .main-result .value {
            font-size: 1.75rem;
            font-weight: 700;
            transition: all 0.4s ease-in-out; /* Animação para o valor do faturamento */
        }

        /* Estilização customizada para o range input */
        input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 10px;
            background: #dbeafe; /* Azul bem claro para a trilha do slider */
            border-radius: 5px;
            outline: none;
            opacity: 0.9;
            transition: opacity .2s;
        }
        input[type="range"]:hover {
            opacity: 1;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #2563eb; /* Azul forte para o polegar do slider */
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid white;
            box-shadow: 0 0 5px rgba(37, 99, 235, 0.5);
        }
        input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #2563eb;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid white;
            box-shadow: 0 0 5px rgba(37, 99, 235, 0.5);
        }
        .results-title-box {
            /* Estilo atualizado para o título dos resultados */
            border: 2px solid #1e3a8a; /* Borda azul escura sólida */
            padding: 10px 15px; /* Aumentado padding */
            text-align: center;
            margin-bottom: 20px; /* Aumentado margem inferior */
            color: #1e3a8a; /* Cor do texto azul escura */
            font-weight: 700; /* Mais forte */
            font-size: 1.1rem; /* Levemente maior */
            border-radius: 8px; /* Bordas arredondadas */
            background-color: #e0e7ff; /* Fundo azul bem claro para destaque sutil */
            letter-spacing: 0.5px; /* Espaçamento entre letras */
        }

        /* Classe para destacar valor atualizado (opcional, pode ser ativada via JS) */
        .value-updated {
            transform: scale(1.08);
            color: #a5b4fc; /* Cor de destaque momentâneo */
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="max-w-5xl mx-auto calculator-container p-6 md:p-10">
        <div class="text-center mb-8">
            <a href="https://thetrinity.com.br"><img src="https://i.ibb.co/fdKY8Jk5/Trinity-Concept-001-01-1.png" alt="Logótipo Trinity" class="block mx-auto mb-4 h-12"></a>
            <h1 class="text-2xl md:text-3xl font-bold text-[#1e3a8a]">Calculadora Funil de Aplicação</h1>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
            <div class="md:col-span-2 space-y-5">
                <div class="input-group">
                    <label for="investimentoMes" class="block text-sm mb-1">Investimento por Mês (R$)</label>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="investimentoMesSlider" min="1000" max="50000" value="10000" step="500" class="slider w-full">
                        <input type="number" id="investimentoMes" value="10000" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>

                <div class="input-group">
                    <label for="precoLead" class="block text-sm mb-1">Preço por Lead (R$)</label>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="precoLeadSlider" min="5" max="100" value="30" step="1" class="slider w-full">
                        <input type="number" id="precoLead" value="30" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>

                <div class="input-group">
                    <label for="taxaAgendamento" class="block text-sm mb-1">Taxa de Agendamento (%)</label>
                     <p class="text-xs text-gray-500 mb-1">5% ruins, 10% regulares, 15% boas, 20% excelentes</p>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="taxaAgendamentoSlider" min="1" max="30" value="10" step="1" class="slider w-full">
                        <input type="number" id="taxaAgendamento" value="10" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>

                <div class="input-group">
                    <label for="taxaComparecimento" class="block text-sm mb-1">Taxa de Comparecimento (%)</label>
                    <p class="text-xs text-gray-500 mb-1">Média 50% a 85%</p>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="taxaComparecimentoSlider" min="10" max="100" value="40" step="1" class="slider w-full">
                        <input type="number" id="taxaComparecimento" value="40" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>

                <div class="input-group">
                    <label for="taxaConversao" class="block text-sm mb-1">Taxa de Conversão (%)</label>
                    <p class="text-xs text-gray-500 mb-1">Média 10% a 30%</p>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="taxaConversaoSlider" min="1" max="50" value="15" step="1" class="slider w-full">
                        <input type="number" id="taxaConversao" value="15" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>

                <div class="input-group">
                    <label for="ticketMedio" class="block text-sm mb-1">Ticket Médio (R$)</label>
                    <div class="flex items-center space-x-3">
                        <input type="range" id="ticketMedioSlider" min="500" max="20000" value="8100" step="100" class="slider w-full">
                        <input type="number" id="ticketMedio" value="8100" class="p-2 border rounded-md w-28 text-center slider-value bg-[#1e3a8a] text-white">
                    </div>
                </div>
            </div>

            <div class="md:col-span-1">
                <div class="results-title-box">
                    RESULTADOS (MENSAL)
                </div>
                <div class="results-card">
                    <div class="main-result mb-4">
                        <span class="label">Faturamento</span>
                        <span class="value" id="faturamentoResultado">R$ 0,00</span>
                    </div>
                    <div class="result-item">
                        <span>Número de Vendas:</span>
                        <span id="numeroVendasResultado">0</span>
                    </div>
                    <div class="result-item">
                        <span>Custo por Call Realizada:</span>
                        <span id="custoCallResultado">R$ 0,00</span>
                    </div>
                    <div class="result-item">
                        <span>CAC:</span>
                        <span id="cacResultado">R$ 0,00</span>
                    </div>
                    <div class="result-item">
                        <span>ROAS:</span>
                        <span id="roasResultado">0</span>
                    </div>
                    <div class="result-item">
                        <span>Número de SDRs:</span>
                        <span id="sdrResultado">0</span>
                    </div>
                    <div class="result-item">
                        <span>Número de Closers:</span>
                        <span id="closerResultado">0</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Seleciona todos os inputs e sliders
        const inputs = {
            investimentoMes: document.getElementById('investimentoMes'),
            investimentoMesSlider: document.getElementById('investimentoMesSlider'),
            precoLead: document.getElementById('precoLead'),
            precoLeadSlider: document.getElementById('precoLeadSlider'),
            taxaAgendamento: document.getElementById('taxaAgendamento'),
            taxaAgendamentoSlider: document.getElementById('taxaAgendamentoSlider'),
            taxaComparecimento: document.getElementById('taxaComparecimento'),
            taxaComparecimentoSlider: document.getElementById('taxaComparecimentoSlider'),
            taxaConversao: document.getElementById('taxaConversao'),
            taxaConversaoSlider: document.getElementById('taxaConversaoSlider'),
            ticketMedio: document.getElementById('ticketMedio'),
            ticketMedioSlider: document.getElementById('ticketMedioSlider'),
        };

        const resultsElements = { // Renomeado para evitar conflito com a variável 'results' dentro da função
            faturamento: document.getElementById('faturamentoResultado'),
            numeroVendas: document.getElementById('numeroVendasResultado'),
            custoCall: document.getElementById('custoCallResultado'),
            cac: document.getElementById('cacResultado'),
            roas: document.getElementById('roasResultado'),
            sdr: document.getElementById('sdrResultado'),
            closer: document.getElementById('closerResultado'),
        };

        // Função para formatar número como moeda brasileira
        function formatCurrency(value) {
            return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        // Função para adicionar um breve destaque visual ao atualizar um valor
        function highlightUpdate(element) {
            element.classList.add('value-updated');
            setTimeout(() => {
                element.classList.remove('value-updated');
            }, 400); // Duração do destaque deve ser igual ou menor que a transição CSS
        }

        // Função para calcular e atualizar os resultados
        function calcularResultados() {
            const investimento = parseFloat(inputs.investimentoMes.value) || 0;
            const precoLead = parseFloat(inputs.precoLead.value) || 0;
            const txAgendamento = parseFloat(inputs.taxaAgendamento.value) / 100 || 0;
            const txComparecimento = parseFloat(inputs.taxaComparecimento.value) / 100 || 0;
            const txConversao = parseFloat(inputs.taxaConversao.value) / 100 || 0;
            const ticketMedio = parseFloat(inputs.ticketMedio.value) || 0;

            const leadsPorSDR = 750;
            const atendimentosPorCloser = 90;

            let numeroLeads = 0;
            if (precoLead > 0) {
                numeroLeads = investimento / precoLead;
            }

            const numeroAgendamentos = numeroLeads * txAgendamento;
            const numeroComparecimentos = numeroAgendamentos * txComparecimento; // Calls Realizadas
            const numeroVendas = numeroComparecimentos * txConversao;
            const faturamento = numeroVendas * ticketMedio;

            let custoCall = 0;
            if (numeroComparecimentos > 0) {
                custoCall = investimento / numeroComparecimentos;
            }

            let cac = 0;
            if (numeroVendas > 0) {
                cac = investimento / numeroVendas;
            }

            let roas = 0;
            if (investimento > 0) {
                roas = faturamento / investimento;
            }
            
            let numSDRs = 0;
            if (leadsPorSDR > 0 && numeroLeads > 0) {
                numSDRs = Math.ceil(numeroLeads / leadsPorSDR);
            }

            let numClosers = 0;
            if (atendimentosPorCloser > 0 && numeroComparecimentos > 0) {
                numClosers = Math.ceil(numeroComparecimentos / atendimentosPorCloser);
            }

            // Atualiza os campos de resultado
            // Verifica se o valor mudou antes de aplicar o highlight para evitar piscar desnecessário
            if (resultsElements.faturamento.textContent !== formatCurrency(faturamento)) {
                resultsElements.faturamento.textContent = formatCurrency(faturamento);
                highlightUpdate(resultsElements.faturamento);
            }
            if (resultsElements.numeroVendas.textContent !== String(Math.round(numeroVendas))) {
                resultsElements.numeroVendas.textContent = Math.round(numeroVendas);
                highlightUpdate(resultsElements.numeroVendas);
            }
            if (resultsElements.custoCall.textContent !== formatCurrency(custoCall)) {
                resultsElements.custoCall.textContent = formatCurrency(custoCall);
                highlightUpdate(resultsElements.custoCall);
            }
            if (resultsElements.cac.textContent !== formatCurrency(cac)) {
                resultsElements.cac.textContent = formatCurrency(cac);
                highlightUpdate(resultsElements.cac);
            }
            const roasFormatted = roas.toFixed(2).replace('.', ',');
            if (resultsElements.roas.textContent !== roasFormatted) {
                resultsElements.roas.textContent = roasFormatted;
                highlightUpdate(resultsElements.roas);
            }
             if (resultsElements.sdr.textContent !== String(numSDRs)) {
                resultsElements.sdr.textContent = numSDRs;
                highlightUpdate(resultsElements.sdr);
            }
            if (resultsElements.closer.textContent !== String(numClosers)) {
                resultsElements.closer.textContent = numClosers;
                highlightUpdate(resultsElements.closer);
            }
        }

        // Adiciona event listeners para sincronizar sliders e inputs numéricos, e recalcular
        for (const key in inputs) {
            if (inputs.hasOwnProperty(key)) {
                const element = inputs[key];
                element.addEventListener('input', () => {
                    if (key.includes('Slider')) {
                        const numericInputKey = key.replace('Slider', '');
                        inputs[numericInputKey].value = element.value;
                    } else {
                        const sliderInputKey = key + 'Slider';
                        if (inputs[sliderInputKey]) {
                           inputs[sliderInputKey].value = element.value;
                        }
                    }
                    calcularResultados();
                });
                 // Para inputs numéricos, recalcular também ao perder o foco (onchange) caso o usuário digite e saia
                if (element.type === 'number') {
                    element.addEventListener('change', calcularResultados);
                }
            }
        }
        
        // Calcula os resultados iniciais ao carregar a página
        document.addEventListener('DOMContentLoaded', calcularResultados);
    </script>
</body>
</html>
